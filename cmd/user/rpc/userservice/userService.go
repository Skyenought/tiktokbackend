// Code generated by goctl. DO NOT EDIT.
// Source: user.proto

package userservice

import (
	"context"

	"github.com/Skyenought/tiktokbackend/cmd/user/rpc/userpc"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	LoginReq               = userpc.LoginReq
	LoginResp              = userpc.LoginResp
	Msg                    = userpc.Msg
	MsgActionReq           = userpc.MsgActionReq
	MsgActionResp          = userpc.MsgActionResp
	MsgChatListReq         = userpc.MsgChatListReq
	MsgChatListResp        = userpc.MsgChatListResp
	RegisterReq            = userpc.RegisterReq
	RegisterResp           = userpc.RegisterResp
	RelationActionReq      = userpc.RelationActionReq
	RelationActionResp     = userpc.RelationActionResp
	RelationFanlistReq     = userpc.RelationFanlistReq
	RelationFanlistResp    = userpc.RelationFanlistResp
	RelationFollowlistReq  = userpc.RelationFollowlistReq
	RelationFollowlistResp = userpc.RelationFollowlistResp
	UpdateCountReq         = userpc.UpdateCountReq
	UpdateCountResp        = userpc.UpdateCountResp
	User                   = userpc.User
	UserInfoReq            = userpc.UserInfoReq
	UserInfoResp           = userpc.UserInfoResp

	UserService interface {
		Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
		Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error)
		UserInfo(ctx context.Context, in *UserInfoReq, opts ...grpc.CallOption) (*UserInfoResp, error)
		UpdateCount(ctx context.Context, in *UpdateCountReq, opts ...grpc.CallOption) (*UpdateCountResp, error)
		RelationFollowlist(ctx context.Context, in *RelationFollowlistReq, opts ...grpc.CallOption) (*RelationFollowlistResp, error)
		RelationFanlist(ctx context.Context, in *RelationFanlistReq, opts ...grpc.CallOption) (*RelationFanlistResp, error)
		RelationAction(ctx context.Context, in *RelationActionReq, opts ...grpc.CallOption) (*RelationActionResp, error)
		MsgChatList(ctx context.Context, in *MsgChatListReq, opts ...grpc.CallOption) (*MsgChatListResp, error)
		MsgAction(ctx context.Context, in *MsgActionReq, opts ...grpc.CallOption) (*MsgActionResp, error)
	}

	defaultUserService struct {
		cli zrpc.Client
	}
)

func NewUserService(cli zrpc.Client) UserService {
	return &defaultUserService{
		cli: cli,
	}
}

func (m *defaultUserService) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	client := userpc.NewUserServiceClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

func (m *defaultUserService) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error) {
	client := userpc.NewUserServiceClient(m.cli.Conn())
	return client.Register(ctx, in, opts...)
}

func (m *defaultUserService) UserInfo(ctx context.Context, in *UserInfoReq, opts ...grpc.CallOption) (*UserInfoResp, error) {
	client := userpc.NewUserServiceClient(m.cli.Conn())
	return client.UserInfo(ctx, in, opts...)
}

func (m *defaultUserService) UpdateCount(ctx context.Context, in *UpdateCountReq, opts ...grpc.CallOption) (*UpdateCountResp, error) {
	client := userpc.NewUserServiceClient(m.cli.Conn())
	return client.UpdateCount(ctx, in, opts...)
}

func (m *defaultUserService) RelationFollowlist(ctx context.Context, in *RelationFollowlistReq, opts ...grpc.CallOption) (*RelationFollowlistResp, error) {
	client := userpc.NewUserServiceClient(m.cli.Conn())
	return client.RelationFollowlist(ctx, in, opts...)
}

func (m *defaultUserService) RelationFanlist(ctx context.Context, in *RelationFanlistReq, opts ...grpc.CallOption) (*RelationFanlistResp, error) {
	client := userpc.NewUserServiceClient(m.cli.Conn())
	return client.RelationFanlist(ctx, in, opts...)
}

func (m *defaultUserService) RelationAction(ctx context.Context, in *RelationActionReq, opts ...grpc.CallOption) (*RelationActionResp, error) {
	client := userpc.NewUserServiceClient(m.cli.Conn())
	return client.RelationAction(ctx, in, opts...)
}

func (m *defaultUserService) MsgChatList(ctx context.Context, in *MsgChatListReq, opts ...grpc.CallOption) (*MsgChatListResp, error) {
	client := userpc.NewUserServiceClient(m.cli.Conn())
	return client.MsgChatList(ctx, in, opts...)
}

func (m *defaultUserService) MsgAction(ctx context.Context, in *MsgActionReq, opts ...grpc.CallOption) (*MsgActionResp, error) {
	client := userpc.NewUserServiceClient(m.cli.Conn())
	return client.MsgAction(ctx, in, opts...)
}
