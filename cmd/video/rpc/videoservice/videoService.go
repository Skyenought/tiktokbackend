// Code generated by goctl. DO NOT EDIT.
// Source: video.proto

package videoservice

import (
	"context"

	"github.com/Skyenought/tiktokbackend/cmd/video/rpc/videorpc"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	FavoriteActionReq      = videorpc.FavoriteActionReq
	FavoriteActionResp     = videorpc.FavoriteActionResp
	FavoriteVideoListReq   = videorpc.FavoriteVideoListReq
	FavoriteVideoListResp  = videorpc.FavoriteVideoListResp
	FeedReq                = videorpc.FeedReq
	FeedResp               = videorpc.FeedResp
	PublishActionReq       = videorpc.PublishActionReq
	PublishActionResp      = videorpc.PublishActionResp
	PublishlistReq         = videorpc.PublishlistReq
	PublishlistResp        = videorpc.PublishlistResp
	UpdateCommentCountReq  = videorpc.UpdateCommentCountReq
	UpdateCommentCountResp = videorpc.UpdateCommentCountResp
	Video                  = videorpc.Video

	VideoService interface {
		FavoriteAction(ctx context.Context, in *FavoriteActionReq, opts ...grpc.CallOption) (*FavoriteActionResp, error)
		FavoriteVideoList(ctx context.Context, in *FavoriteVideoListReq, opts ...grpc.CallOption) (*FavoriteVideoListResp, error)
		PublishAction(ctx context.Context, in *PublishActionReq, opts ...grpc.CallOption) (*PublishActionResp, error)
		PublishList(ctx context.Context, in *PublishlistReq, opts ...grpc.CallOption) (*PublishlistResp, error)
		Feed(ctx context.Context, in *FeedReq, opts ...grpc.CallOption) (*FeedResp, error)
		UpdateCommentCount(ctx context.Context, in *UpdateCommentCountReq, opts ...grpc.CallOption) (*UpdateCommentCountResp, error)
	}

	defaultVideoService struct {
		cli zrpc.Client
	}
)

func NewVideoService(cli zrpc.Client) VideoService {
	return &defaultVideoService{
		cli: cli,
	}
}

func (m *defaultVideoService) FavoriteAction(ctx context.Context, in *FavoriteActionReq, opts ...grpc.CallOption) (*FavoriteActionResp, error) {
	client := videorpc.NewVideoServiceClient(m.cli.Conn())
	return client.FavoriteAction(ctx, in, opts...)
}

func (m *defaultVideoService) FavoriteVideoList(ctx context.Context, in *FavoriteVideoListReq, opts ...grpc.CallOption) (*FavoriteVideoListResp, error) {
	client := videorpc.NewVideoServiceClient(m.cli.Conn())
	return client.FavoriteVideoList(ctx, in, opts...)
}

func (m *defaultVideoService) PublishAction(ctx context.Context, in *PublishActionReq, opts ...grpc.CallOption) (*PublishActionResp, error) {
	client := videorpc.NewVideoServiceClient(m.cli.Conn())
	return client.PublishAction(ctx, in, opts...)
}

func (m *defaultVideoService) PublishList(ctx context.Context, in *PublishlistReq, opts ...grpc.CallOption) (*PublishlistResp, error) {
	client := videorpc.NewVideoServiceClient(m.cli.Conn())
	return client.PublishList(ctx, in, opts...)
}

func (m *defaultVideoService) Feed(ctx context.Context, in *FeedReq, opts ...grpc.CallOption) (*FeedResp, error) {
	client := videorpc.NewVideoServiceClient(m.cli.Conn())
	return client.Feed(ctx, in, opts...)
}

func (m *defaultVideoService) UpdateCommentCount(ctx context.Context, in *UpdateCommentCountReq, opts ...grpc.CallOption) (*UpdateCommentCountResp, error) {
	client := videorpc.NewVideoServiceClient(m.cli.Conn())
	return client.UpdateCommentCount(ctx, in, opts...)
}
